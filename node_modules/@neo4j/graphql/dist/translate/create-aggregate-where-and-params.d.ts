import Cypher from "@neo4j/cypher-builder";
import type { Node, Relationship } from "../classes";
import type { RelationField, Context, GraphQLWhereArg, PredicateReturn } from "../types";
import { ListPredicate } from "./where/utils";
type logicalOperator = "AND" | "OR";
type WhereFilter = Record<string | logicalOperator, any>;
export type AggregateWhereInput = {
    count: number;
    count_LT: number;
    count_LTE: number;
    count_GT: number;
    count_GTE: number;
    node: WhereFilter;
    edge: WhereFilter;
} & WhereFilter;
type AggregateWhereReturn = {
    returnProjections: ("*" | Cypher.ProjectionColumn)[];
    predicates: Cypher.Predicate[];
    returnVariables: Cypher.Variable[];
};
export declare function aggregatePreComputedWhereFields(value: GraphQLWhereArg, relationField: RelationField, relationship: Relationship | undefined, context: Context, matchNode: Cypher.Variable, listPredicateStr?: ListPredicate): PredicateReturn;
export declare function aggregateWhere(aggregateWhereInput: AggregateWhereInput, refNode: Node, relationship: Relationship | undefined, aggregationTarget: Cypher.Node, cypherRelation: Cypher.Relationship, listPredicateStr?: ListPredicate): AggregateWhereReturn;
export {};
//# sourceMappingURL=create-aggregate-where-and-params.d.ts.map